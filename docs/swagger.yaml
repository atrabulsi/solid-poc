openapi: 3.0.0
info:
  description: "This is the workshop swagger file"
  title: "Workshop"
  version: 1.0.0

servers:
  - url: 'http://localhost:8083'
    description: 'Local'

paths:
  /solid/sr/no-cache/{id}:
    get:
      tags:
        - "Single Responsibility Principle"
      summary: "Get one wave based on the ID, with no caching"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the wave"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wave'

  /solid/sr/with-cache-in-service/{id}:
    get:
      tags:
        - "Single Responsibility Principle"
      summary: "Get one wave based on the ID, with no caching"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the wave"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wave'

  /solid/sr/with-cacheable-repo/{id}:
    get:
      tags:
        - "Single Responsibility Principle"
      summary: "Get one wave based on the ID, with no caching"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the wave"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wave'

  /solid/di/json/{id}:
    get:
      tags:
        - "Dependency Inversion Principle"
      summary: "Get one wave in JSON format using dependency inversion"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the wave"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wave'

  /solid/di/html/{id}:
    get:
      tags:
        - "Dependency Inversion Principle"
      summary: "Get one wave in HTML format using dependency inversion"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the wave"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wave'

  /ddd/waves:
    post:
      tags:
        - "Domain Driven Design"
      summary: "Create a wave (if name = error, you'll get a database connection error)"
      requestBody:
        $ref: "#/components/requestBodies/Wave"
      responses:
        '201':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wave"
        '400':
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ddd/waves/{id}:
    get:
      tags:
        - "Domain Driven Design"
      summary: "Get a wave (If ID = 10, you'll get a database connection error)"
      parameters:
        - name: "id"
          in: "query"
          description: "ID of the wave to retrieve"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wave"
        '404':
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  requestBodies:
    Wave:
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "name"
            properties:
              name:
                type: "string"
                description: "The name of the wave"
                example: "Black Friday 2020"
              startDate:
                type: "string"
                format: date-time
              endDate:
                type: "string"
                format: date-time
  schemas:
    Wave:
      type: "object"
      properties:
        id:
          type: "string"
          example: "1"
          description: The ID of the wave
        title:
          type: "string"
          example: "Test wave"
          description: The title of the wave
        startDate:
          type: "string"
          format: date-time
        endDate:
          type: "string"
          format: date-time
        status:
          type: "string"
          enum: [draft, scheduled, live, ended]
    Error:
      type: "object"
      properties:
        error:
          type: "string"
          example: "The start date must be before the end date"
